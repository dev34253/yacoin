# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
include $(YDIR)/sw/yconf

CC ?= g++
CXX ?= g++

USE_UPNP:=1
USE_IPV6:=0
USE_ASM:=1

BOOST_INCLUDE_PATH=$(YBOO)/include
BOOST_LIB_PATH=$(YBOO)/lib
BDB_INCLUDE_PATH=$(YBDB)/include
BDB_LIB_PATH=$(YBDB)/lib
OPENSSL_INCLUDE_PATH=$(YOSSL)/include
OPENSSL_LIB_PATH=$(YOSSL)/lib
MINIUPNPC_INCLUDE_PATH=$(YUPNP)/include
MINIUPNPC_LIB_PATH=$(YUPNP)/lib

INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)/obj" \
 -I"$(CURDIR)/scrypt-jane" \
 -I$(BOOST_INCLUDE_PATH) \
 -I$(BDB_INCLUDE_PATH) \
 -I$(OPENSSL_INCLUDE_PATH) \
 -I$(MINIUPNPC_INCLUDE_PATH) \
 -I./leveldb/include \
 -I./leveldb/helpers

LIBS= \
  -Wl, -Bstatic \
  -lminiupnpc -liphlpapi \
  -lleveldb \
  -lmemenv \
  -lssl \
  -lcrypto \
  -ldb_cxx-4.8 \
  -lws2_32 -lshlwapi -lmswsock -lole32 -loleaut32 -luuid -lgdi32 \
  -lboost_system -lboost_filesystem -lboost_program_options -lboost_thread \
  -lboost_chrono -Wl,-Bstatic -lpthread

LIBPATHS= \
 -L$(OPENSSL_LIB_PATH) \
 -L$(BOOST_LIB_PATH) \
 -L$(BDB_LIB_PATH) \
 -L$(MINIUPNPC_LIB_PATH) \
 -L./leveldb

DEFS= \
    -DUSE_LEVELDB \
	-DUSE_ASM \
	-DWIN32 \
	-D_WINDOWS \
	-DBOOST_THREAD_USE_LIB \
	-DBOOST_SPIRIT_THREADSAFE \
	-DSCRYPT_CHACHA \
	-DSCRYPT_KECCAK512 \
	-DSCRYPT_CHOOSE_COMPILETIME \
	-DHAVE_BUILD_INFO

DEBUGFLAGS=\
	-g

CFLAGS= \
	-O2 \
	-msse2 \
	-w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter \
	$(DEBUGFLAGS) \
	$(DEFS) \
	$(INCLUDEPATHS)

LDFLAGS= \
	-Wl,--dynamicbase \
	-Wl,--nxcompat \
	-Wl,--large-address-aware \
	-static

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
 DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP) -DMINIUPNP_STATICLIB
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/txdb-leveldb.o \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/stun.o \
    obj/miner.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/price.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/scrypt-jane.o

all: yacoind.exe

test check: test_yacoin.exe FORCE
	test_yacoin.exe

DEFS += $(addprefix -I,c:/deps/openssl-1.0.1g/include)

obj/scrypt-jane.o: scrypt-jane/scrypt-jane.c 
	g++ -c -frandom-seed=$@ $(CFLAGS) -MMD -o $@ $<

obj/%.o: %.cpp $(HEADERS)
	g++ -c -frandom-seed=$@ $(CFLAGS) -o $@ $<

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c -frandom-seed=$@ $(xCXXFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c -frandom-seed=$@ $(xCXXFLAGS) -MMD -o $@ $<

yacoind.exe: $(OBJS:obj/%=obj/%)
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS)
	cp yacoind.exe ../release

TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp $(HEADERS)
	g++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_yacoin.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework$(BOOST_SUFFIX) $(LIBS)

obj/build.h: FORCE
	sh ../share/genbuild.sh obj/build.h

version.cpp: obj/build.h

clean:
	del /Q yacoind test_yacoin
	del /Q obj\*
	del /Q obj-test\*

FORCE:
